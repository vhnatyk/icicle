"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[411],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>f});var i=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),g=r,f=u["".concat(s,".").concat(g)]||u[g]||d[g]||o;return n?i.createElement(f,a(a({ref:t},p),{},{components:n})):i.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1519:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(8168),r=(n(6540),n(5680));n(1873);const o={},a="Vector Operations API",l={unversionedId:"icicle/rust-bindings/vec-ops",id:"icicle/rust-bindings/vec-ops",title:"Vector Operations API",description:"Our vector operations API which is part of icicle-cuda-runtime package, includes fundamental methods for addition, subtraction, and multiplication of vectors, with support for both host and device memory.",source:"@site/docs/icicle/rust-bindings/vec-ops.md",sourceDirName:"icicle/rust-bindings",slug:"/icicle/rust-bindings/vec-ops",permalink:"/icicle/rust-bindings/vec-ops",editUrl:"https://github.com/ingonyama-zk/icicle/tree/main/docs/icicle/rust-bindings/vec-ops.md",tags:[],version:"current",lastUpdatedBy:"Leon Hibnik",lastUpdatedAt:1712557229,formattedLastUpdatedAt:"4/8/2024",frontMatter:{},sidebar:"GettingStartedSidebar",previous:{title:"NTT",permalink:"/icicle/rust-bindings/ntt"},next:{title:"Multi GPU APIs",permalink:"/icicle/rust-bindings/multi-gpu"}},s={},c=[{value:"Supported curves",id:"supported-curves",level:2},{value:"Examples",id:"examples",level:2},{value:"Addition of Scalars",id:"addition-of-scalars",level:3},{value:"Subtraction of Scalars",id:"subtraction-of-scalars",level:3},{value:"Multiplication of Scalars",id:"multiplication-of-scalars",level:3},{value:"Vector Operations Configuration",id:"vector-operations-configuration",level:2},{value:"<code>VecOpsConfig</code>",id:"vecopsconfig",level:3},{value:"Fields",id:"fields",level:4},{value:"Default Configuration",id:"default-configuration",level:3},{value:"Vector Operations",id:"vector-operations",level:2},{value:"<code>VecOps</code> Trait",id:"vecops-trait",level:3},{value:"Methods",id:"methods",level:4}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(u,(0,i.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"vector-operations-api"},"Vector Operations API"),(0,r.yg)("p",null,"Our vector operations API which is part of ",(0,r.yg)("inlineCode",{parentName:"p"},"icicle-cuda-runtime")," package, includes fundamental methods for addition, subtraction, and multiplication of vectors, with support for both host and device memory. "),(0,r.yg)("h2",{id:"supported-curves"},"Supported curves"),(0,r.yg)("p",null,"Vector operations are supported on the following curves:"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"bls12-377"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"bls12-381"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"bn-254"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"bw6-761"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"grumpkin")),(0,r.yg)("h2",{id:"examples"},"Examples"),(0,r.yg)("h3",{id:"addition-of-scalars"},"Addition of Scalars"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"use icicle_bn254::curve::{ScalarCfg, ScalarField};\nuse icicle_core::vec_ops::{add_scalars};\n\nlet test_size = 1 << 18;\n\nlet a: HostOrDeviceSlice<'_, ScalarField> = HostOrDeviceSlice::on_host(F::Config::generate_random(test_size));\nlet b: HostOrDeviceSlice<'_, ScalarField> = HostOrDeviceSlice::on_host(F::Config::generate_random(test_size));\nlet mut result: HostOrDeviceSlice<'_, ScalarField> = HostOrDeviceSlice::on_host(vec![F::zero(); test_size]);\n\nlet cfg = VecOpsConfig::default();\nadd_scalars(&a, &b, &mut result, &cfg).unwrap();\n")),(0,r.yg)("h3",{id:"subtraction-of-scalars"},"Subtraction of Scalars"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"use icicle_bn254::curve::{ScalarCfg, ScalarField};\nuse icicle_core::vec_ops::{sub_scalars};\n\nlet test_size = 1 << 18;\n\nlet a: HostOrDeviceSlice<'_, ScalarField> = HostOrDeviceSlice::on_host(F::Config::generate_random(test_size));\nlet b: HostOrDeviceSlice<'_, ScalarField> = HostOrDeviceSlice::on_host(F::Config::generate_random(test_size));\nlet mut result: HostOrDeviceSlice<'_, ScalarField> = HostOrDeviceSlice::on_host(vec![F::zero(); test_size]);\n\nlet cfg = VecOpsConfig::default();\nsub_scalars(&a, &b, &mut result, &cfg).unwrap();\n")),(0,r.yg)("h3",{id:"multiplication-of-scalars"},"Multiplication of Scalars"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"use icicle_bn254::curve::{ScalarCfg, ScalarField};\nuse icicle_core::vec_ops::{mul_scalars};\n\nlet test_size = 1 << 18;\n\nlet a: HostOrDeviceSlice<'_, ScalarField> = HostOrDeviceSlice::on_host(F::Config::generate_random(test_size));\nlet ones: HostOrDeviceSlice<'_, ScalarField> = HostOrDeviceSlice::on_host(vec![F::one(); test_size]);\nlet mut result: HostOrDeviceSlice<'_, ScalarField> = HostOrDeviceSlice::on_host(vec![F::zero(); test_size]);\n\nlet cfg = VecOpsConfig::default();\nmul_scalars(&a, &ones, &mut result, &cfg).unwrap();\n")),(0,r.yg)("h2",{id:"vector-operations-configuration"},"Vector Operations Configuration"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"VecOpsConfig")," struct encapsulates the settings for vector operations, including device context and operation modes."),(0,r.yg)("h3",{id:"vecopsconfig"},(0,r.yg)("inlineCode",{parentName:"h3"},"VecOpsConfig")),(0,r.yg)("p",null,"Defines configuration parameters for vector operations."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"pub struct VecOpsConfig<'a> {\n    pub ctx: DeviceContext<'a>,\n    is_a_on_device: bool,\n    is_b_on_device: bool,\n    is_result_on_device: bool,\n    is_result_montgomery_form: bool,\n    pub is_async: bool,\n}\n")),(0,r.yg)("h4",{id:"fields"},"Fields"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"ctx: DeviceContext<'a>")),": Specifies the device context for the operation, including the device ID and memory pool."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"is_a_on_device")),": Indicates if the first operand vector resides in device memory."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"is_b_on_device")),": Indicates if the second operand vector resides in device memory."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"is_result_on_device")),": Specifies if the result vector should be stored in device memory."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"is_result_montgomery_form")),": Determines if the result should be in Montgomery form."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"is_async")),": Enables asynchronous operation. If ",(0,r.yg)("inlineCode",{parentName:"li"},"true"),", operations are non-blocking; otherwise, they block the current thread.")),(0,r.yg)("h3",{id:"default-configuration"},"Default Configuration"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"VecOpsConfig")," can be initialized with default settings tailored for a specific device:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"let cfg = VecOpsConfig::default();\n")),(0,r.yg)("p",null,"These are the default settings."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"impl<'a> Default for VecOpsConfig<'a> {\n    fn default() -> Self {\n        Self::default_for_device(DEFAULT_DEVICE_ID)\n    }\n}\n\nimpl<'a> VecOpsConfig<'a> {\n    pub fn default_for_device(device_id: usize) -> Self {\n        VecOpsConfig {\n            ctx: DeviceContext::default_for_device(device_id),\n            is_a_on_device: false,\n            is_b_on_device: false,\n            is_result_on_device: false,\n            is_result_montgomery_form: false,\n            is_async: false,\n        }\n    }\n}\n")),(0,r.yg)("h2",{id:"vector-operations"},"Vector Operations"),(0,r.yg)("p",null,"Vector operations are implemented through the ",(0,r.yg)("inlineCode",{parentName:"p"},"VecOps")," trait, these traits are implemented for all ",(0,r.yg)("a",{parentName:"p",href:"#supported-curves"},"supported curves")," providing methods for addition, subtraction, and multiplication of vectors."),(0,r.yg)("h3",{id:"vecops-trait"},(0,r.yg)("inlineCode",{parentName:"h3"},"VecOps")," Trait"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"pub trait VecOps<F> {\n    fn add(\n        a: &HostOrDeviceSlice<F>,\n        b: &HostOrDeviceSlice<F>,\n        result: &mut HostOrDeviceSlice<F>,\n        cfg: &VecOpsConfig,\n    ) -> IcicleResult<()>;\n\n    fn sub(\n        a: &HostOrDeviceSlice<F>,\n        b: &HostOrDeviceSlice<F>,\n        result: &mut HostOrDeviceSlice<F>,\n        cfg: &VecOpsConfig,\n    ) -> IcicleResult<()>;\n\n    fn mul(\n        a: &HostOrDeviceSlice<F>,\n        b: &HostOrDeviceSlice<F>,\n        result: &mut HostOrDeviceSlice<F>,\n        cfg: &VecOpsConfig,\n    ) -> IcicleResult<()>;\n}\n")),(0,r.yg)("h4",{id:"methods"},"Methods"),(0,r.yg)("p",null,"All operations are element-wise operations, and the results placed into the ",(0,r.yg)("inlineCode",{parentName:"p"},"result")," param. These operations are not in place."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"add")),": Computes the element-wise sum of two vectors."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"sub")),": Computes the element-wise difference between two vectors."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"mul")),": Performs element-wise multiplication of two vectors.")))}d.isMDXComponent=!0},1873:(e,t,n)=>{n(6540)}}]);