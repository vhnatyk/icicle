"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[246],{5680:(e,t,n)=>{n.d(t,{xA:()=>s,yg:()=>m});var i=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,m=p["".concat(l,".").concat(d)]||p[d]||g[d]||r;return n?i.createElement(m,c(c({ref:t},s),{},{components:n})):i.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,c=new Array(r);c[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:a,c[1]=o;for(var u=2;u<r;u++)c[u]=n[u];return i.createElement.apply(null,c)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2172:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>g,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var i=n(8168),a=(n(6540),n(5680));n(1873);const r={},c="Keccak",o={unversionedId:"icicle/rust-bindings/keccak",id:"icicle/rust-bindings/keccak",title:"Keccak",description:"Keccak Example",source:"@site/docs/icicle/rust-bindings/keccak.md",sourceDirName:"icicle/rust-bindings",slug:"/icicle/rust-bindings/keccak",permalink:"/icicle/rust-bindings/keccak",editUrl:"https://github.com/ingonyama-zk/icicle/tree/main/docs/icicle/rust-bindings/keccak.md",tags:[],version:"current",lastUpdatedBy:"VitaliiH",lastUpdatedAt:1715232285,formattedLastUpdatedAt:"5/9/2024",frontMatter:{},sidebar:"GettingStartedSidebar",previous:{title:"Vector Operations API",permalink:"/icicle/rust-bindings/vec-ops"},next:{title:"Multi GPU APIs",permalink:"/icicle/rust-bindings/multi-gpu"}},l={},u=[{value:"Keccak Example",id:"keccak-example",level:2},{value:"Keccak Methods",id:"keccak-methods",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"KeccakConfig",id:"keccakconfig",level:2},{value:"Fields",id:"fields",level:3},{value:"Usage",id:"usage",level:3}],s={toc:u},p="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(p,(0,i.A)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"keccak"},"Keccak"),(0,a.yg)("h2",{id:"keccak-example"},"Keccak Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'use icicle_cuda_runtime::memory::{DeviceVec, HostSlice};\nuse icicle_hash::keccak::{keccak256, KeccakConfig};\nuse rand::{self, Rng};\n\nfn main() {\n    let mut rng = rand::thread_rng();\n    let initial_data: Vec<u8> = (0..120).map(|_| rng.gen::<u8>()).collect();\n    println!("initial data: {}", hex::encode(&initial_data));\n    let input = HostSlice::<u8>::from_slice(initial_data.as_slice());\n    let mut output = DeviceVec::<u8>::cuda_malloc(32).unwrap();\n\n    let mut config = KeccakConfig::default();\n    keccak256(input, initial_data.len() as i32, 1, &mut output[..], &mut config).expect("Failed to execute keccak256 hashing");\n\n    let mut output_host = vec![0_u8; 32];\n    output.copy_to_host(HostSlice::from_mut_slice(&mut output_host[..])).unwrap();\n\n    println!("keccak256 result: {}", hex::encode(&output_host));\n}\n')),(0,a.yg)("h2",{id:"keccak-methods"},"Keccak Methods"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},"pub fn keccak256(\n    input: &(impl HostOrDeviceSlice<u8> + ?Sized),\n    input_block_size: i32,\n    number_of_blocks: i32,\n    output: &mut (impl HostOrDeviceSlice<u8> + ?Sized),\n    config: &mut KeccakConfig,\n) -> IcicleResult<()>\n\npub fn keccak512(\n    input: &(impl HostOrDeviceSlice<u8> + ?Sized),\n    input_block_size: i32,\n    number_of_blocks: i32,\n    output: &mut (impl HostOrDeviceSlice<u8> + ?Sized),\n    config: &mut KeccakConfig,\n) -> IcicleResult<()> \n")),(0,a.yg)("h3",{id:"parameters"},"Parameters"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"input")),": A slice containing the input data for the Keccak256 hash function. It can reside in either host memory or device memory."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"input_block_size")),": An integer specifying the size of the input data for a single hash."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"number_of_blocks")),": An integer specifying the number of results in the hash batch."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"output")),": A slice where the resulting hash will be stored. This slice can be in host or device memory."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"config")),": A pointer to a ",(0,a.yg)("inlineCode",{parentName:"li"},"KeccakConfig")," object, which contains various configuration options for the Keccak256 operation.")),(0,a.yg)("h3",{id:"return-value"},"Return Value"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"IcicleResult")),": Returns a CUDA error code indicating the success or failure of the Keccak256/Keccak512 operation.")),(0,a.yg)("h2",{id:"keccakconfig"},"KeccakConfig"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"KeccakConfig")," structure holds configuration parameters for the Keccak256/Keccak512 operation, allowing customization of its behavior to optimize performance based on the specifics of the operation or the underlying hardware."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},"pub struct KeccakConfig<'a> {\n    pub ctx: DeviceContext<'a>,\n    pub are_inputs_on_device: bool,\n    pub are_outputs_on_device: bool,\n    pub is_async: bool,\n}\n")),(0,a.yg)("h3",{id:"fields"},"Fields"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"ctx")),": Device context containing details like device id and stream."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"are_inputs_on_device")),": Indicates if input data is located on the device."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"are_outputs_on_device")),": Indicates if output hash is stored on the device."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"is_async")),": If true, runs the Keccak256/Keccak512 operation asynchronously.")),(0,a.yg)("h3",{id:"usage"},"Usage"),(0,a.yg)("p",null,"Example initialization with default settings:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},"let default_config = KeccakConfig::default();\n")),(0,a.yg)("p",null,"Customizing the configuration:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},"let custom_config = NTTConfig {\n    ctx: custom_device_context,\n    are_inputs_on_device: true,\n    are_outputs_on_device: true,\n    is_async: false,\n};\n")))}g.isMDXComponent=!0},1873:(e,t,n)=>{n(6540)}}]);