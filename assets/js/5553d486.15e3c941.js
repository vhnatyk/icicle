"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[739],{5680:(e,t,n)=>{n.d(t,{xA:()=>g,yg:()=>y});var a=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},g=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),c=d(n),m=i,y=c["".concat(p,".").concat(m)]||c[m]||s[m]||r;return n?a.createElement(y,l(l({ref:t},g),{},{components:n})):a.createElement(y,l({ref:t},g))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9613:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(8168),i=(n(6540),n(5680));n(1873);const r={},l="ICICLE Core",o={unversionedId:"icicle/core",id:"icicle/core",title:"ICICLE Core",description:"ICICLE Core is a library written in C++/CUDA. All the ICICLE primitives are implemented within ICICLE Core.",source:"@site/docs/icicle/core.md",sourceDirName:"icicle",slug:"/icicle/core",permalink:"/icicle/core",editUrl:"https://github.com/ingonyama-zk/icicle/tree/main/docs/icicle/core.md",tags:[],version:"current",lastUpdatedBy:"VitaliiH",lastUpdatedAt:1715232285,formattedLastUpdatedAt:"5/9/2024",frontMatter:{},sidebar:"GettingStartedSidebar",previous:{title:"Getting started with ICICLE",permalink:"/icicle/introduction"},next:{title:"ICICLE Primitives",permalink:"/icicle/primitives/overview"}},p={},d=[{value:"Supported curves, fields and operations",id:"supported-curves-fields-and-operations",level:2},{value:"Supported curves and operations",id:"supported-curves-and-operations",level:3},{value:"Supported fields and operations",id:"supported-fields-and-operations",level:3},{value:"Supported hashes",id:"supported-hashes",level:3},{value:"Compilation strategies",id:"compilation-strategies",level:2},{value:"Compiling for a field",id:"compiling-for-a-field",level:3},{value:"Compiling for a curve",id:"compiling-for-a-curve",level:3},{value:"Compilation options",id:"compilation-options",level:3},{value:"EXT_FIELD",id:"ext_field",level:4},{value:"G2",id:"g2",level:4},{value:"ECNTT",id:"ecntt",level:4},{value:"MSM",id:"msm",level:4},{value:"BUILD_HASH",id:"build_hash",level:4},{value:"BUILD_TESTS",id:"build_tests",level:4},{value:"BUILD_BENCHMARKS",id:"build_benchmarks",level:4},{value:"DEVMODE",id:"devmode",level:4},{value:"Linking",id:"linking",level:2},{value:"Writing new bindings for ICICLE",id:"writing-new-bindings-for-icicle",level:2}],g={toc:d},c="wrapper";function s(e){let{components:t,...n}=e;return(0,i.yg)(c,(0,a.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"icicle-core"},"ICICLE Core"),(0,i.yg)("p",null,"ICICLE Core is a library written in C++/CUDA. All the ICICLE primitives are implemented within ICICLE Core."),(0,i.yg)("p",null,"The Core is split into logical modules that can be compiled into static libraries using different ",(0,i.yg)("a",{parentName:"p",href:"#compilation-strategies"},"strategies"),". You can then ",(0,i.yg)("a",{parentName:"p",href:"#linking"},"link")," these libraries with your C++ project or write your own ",(0,i.yg)("a",{parentName:"p",href:"#writing-new-bindings-for-icicle"},"bindings")," for other programming languages. If you want to use ICICLE with existing bindings please refer to the ",(0,i.yg)("a",{parentName:"p",href:"/icicle/rust-bindings"},"Rust")," or ",(0,i.yg)("a",{parentName:"p",href:"/icicle/golang-bindings"},"Golang")," bindings documentation."),(0,i.yg)("h2",{id:"supported-curves-fields-and-operations"},"Supported curves, fields and operations"),(0,i.yg)("h3",{id:"supported-curves-and-operations"},"Supported curves and operations"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Operation\\Curve"),(0,i.yg)("th",{parentName:"tr",align:"center"},(0,i.yg)("a",{parentName:"th",href:"https://neuromancer.sk/std/bn/bn254"},"bn254")),(0,i.yg)("th",{parentName:"tr",align:"center"},(0,i.yg)("a",{parentName:"th",href:"https://neuromancer.sk/std/bls/BLS12-377"},"bls12-377")),(0,i.yg)("th",{parentName:"tr",align:"center"},(0,i.yg)("a",{parentName:"th",href:"https://neuromancer.sk/std/bls/BLS12-381"},"bls12-381")),(0,i.yg)("th",{parentName:"tr",align:"center"},(0,i.yg)("a",{parentName:"th",href:"https://eprint.iacr.org/2020/351"},"bw6-761")),(0,i.yg)("th",{parentName:"tr",align:"center"},"grumpkin"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("a",{parentName:"td",href:"primitives/msm"},"MSM")),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"G2"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u274c")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("a",{parentName:"td",href:"primitives/ntt"},"NTT")),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u274c")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"ECNTT"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u274c")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("a",{parentName:"td",href:"https://github.com/ingonyama-zk/icicle/blob/main/icicle/include/vec_ops/vec_ops.cuh"},"VecOps")),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("a",{parentName:"td",href:"polynomials/overview"},"Polynomials")),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u274c")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("a",{parentName:"td",href:"primitives/poseidon"},"Poseidon")),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("a",{parentName:"td",href:"primitives/poseidon#the-tree-builder"},"Merkle Tree")),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705")))),(0,i.yg)("h3",{id:"supported-fields-and-operations"},"Supported fields and operations"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Operation\\Field"),(0,i.yg)("th",{parentName:"tr",align:"center"},(0,i.yg)("a",{parentName:"th",href:"https://eprint.iacr.org/2023/824.pdf"},"babybear")),(0,i.yg)("th",{parentName:"tr",align:"center"},(0,i.yg)("a",{parentName:"th",href:"https://docs.starknet.io/documentation/architecture_and_concepts/Cryptography/p-value/"},"Stark252")))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("a",{parentName:"td",href:"https://github.com/ingonyama-zk/icicle/blob/main/icicle/include/vec_ops/vec_ops.cuh"},"VecOps")),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("a",{parentName:"td",href:"polynomials/overview"},"Polynomials")),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("a",{parentName:"td",href:"primitives/ntt"},"NTT")),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Extension Field"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u2705"),(0,i.yg)("td",{parentName:"tr",align:"center"},"\u274c")))),(0,i.yg)("h3",{id:"supported-hashes"},"Supported hashes"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Hash"),(0,i.yg)("th",{parentName:"tr",align:"center"},"Sizes"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Keccak"),(0,i.yg)("td",{parentName:"tr",align:"center"},"256, 512")))),(0,i.yg)("h2",{id:"compilation-strategies"},"Compilation strategies"),(0,i.yg)("p",null,"Most of the codebase is curve/field agnostic, which means it can be compiled for different curves and fields. When you build ICICLE Core you choose a single curve or field. If you need multiple curves or fields, you compile ICICLE once per curve or field that is needed. It's that simple. Currently, the following choices are supported:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#compiling-for-a-field"},"Field mode")," - used for STARK fields like BabyBear / Mersenne / Goldilocks. Includes field arithmetic, NTT, Poseidon, Extension fields and other primitives."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#compiling-for-a-curve"},"Curve mode")," - used for SNARK curves like BN254 / BLS curves / Grumpkin / etc. Curve mode is built upon field mode, so it includes everything that field does It also includes curve operations / MSM / ECNTT / G2 and other curve-related primitives.")),(0,i.yg)("div",{className:"admonition admonition-info alert alert--info"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("p",{parentName:"div"},"If you only want to use a curve's scalar or base field, you still need to use curve mode. You can disable MSM with ",(0,i.yg)("a",{parentName:"p",href:"#compilation-options"},"options")))),(0,i.yg)("h3",{id:"compiling-for-a-field"},"Compiling for a field"),(0,i.yg)("p",null,"You can compile ICICLE for a field using this command:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sh"},"cd icicle\nmkdir -p build\ncmake -DFIELD=<FIELD> -S . -B build\ncmake --build build -j\n")),(0,i.yg)("p",null,"This command will output ",(0,i.yg)("inlineCode",{parentName:"p"},"libingo_field_<FIELD>.a")," into ",(0,i.yg)("inlineCode",{parentName:"p"},"build/lib"),"."),(0,i.yg)("h3",{id:"compiling-for-a-curve"},"Compiling for a curve"),(0,i.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("p",{parentName:"div"},"Field related primitives will be compiled for the scalar field of the curve"))),(0,i.yg)("p",null,"You can compile ICICLE for a SNARK curve using this command:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sh"},"cd icicle\nmkdir -p build\ncmake -DCURVE=<CURVE> -S . -B build\ncmake --build build -j\n")),(0,i.yg)("p",null,"Where ",(0,i.yg)("inlineCode",{parentName:"p"},"<CURVE>")," can be one of ",(0,i.yg)("inlineCode",{parentName:"p"},"bn254"),"/",(0,i.yg)("inlineCode",{parentName:"p"},"bls12_377"),"/",(0,i.yg)("inlineCode",{parentName:"p"},"bls12_381"),"/",(0,i.yg)("inlineCode",{parentName:"p"},"bw6_761"),"/",(0,i.yg)("inlineCode",{parentName:"p"},"grumpkin"),"."),(0,i.yg)("p",null,"This command will output both ",(0,i.yg)("inlineCode",{parentName:"p"},"libingo_curve_<CURVE>.a")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"libingo_field_<CURVE>.a")," into ",(0,i.yg)("inlineCode",{parentName:"p"},"build/lib"),"."),(0,i.yg)("h3",{id:"compilation-options"},"Compilation options"),(0,i.yg)("p",null,"There exist multiple options that allow you to customize your build or enable additional functionality."),(0,i.yg)("h4",{id:"ext_field"},"EXT_FIELD"),(0,i.yg)("p",null,"Used only in ",(0,i.yg)("a",{parentName:"p",href:"#compiling-for-a-field"},"field mode")," to add an Extension field. Adds all supported field operations for the extension field."),(0,i.yg)("p",null,"Default: ",(0,i.yg)("inlineCode",{parentName:"p"},"OFF")),(0,i.yg)("p",null,"Usage: ",(0,i.yg)("inlineCode",{parentName:"p"},"-DEXT_FIELD=ON")),(0,i.yg)("h4",{id:"g2"},"G2"),(0,i.yg)("p",null,"Used only in ",(0,i.yg)("a",{parentName:"p",href:"#compiling-for-a-curve"},"curve mode")," to add G2 definitions. Also adds G2 MSM."),(0,i.yg)("p",null,"Default: ",(0,i.yg)("inlineCode",{parentName:"p"},"OFF")),(0,i.yg)("p",null,"Usage: ",(0,i.yg)("inlineCode",{parentName:"p"},"-DG2=ON")),(0,i.yg)("h4",{id:"ecntt"},"ECNTT"),(0,i.yg)("p",null,"Used only in ",(0,i.yg)("a",{parentName:"p",href:"#compiling-for-a-curve"},"curve mode")," to add ECNTT function."),(0,i.yg)("p",null,"Default: ",(0,i.yg)("inlineCode",{parentName:"p"},"OFF")),(0,i.yg)("p",null,"Usage: ",(0,i.yg)("inlineCode",{parentName:"p"},"-DECNTT=ON")),(0,i.yg)("h4",{id:"msm"},"MSM"),(0,i.yg)("p",null,"Used only in ",(0,i.yg)("a",{parentName:"p",href:"#compiling-for-a-curve"},"curve mode")," to add MSM function. As MSM takes a lot of time to build, you can disable it with this option to reduce compilation time."),(0,i.yg)("p",null,"Default: ",(0,i.yg)("inlineCode",{parentName:"p"},"ON")),(0,i.yg)("p",null,"Usage: ",(0,i.yg)("inlineCode",{parentName:"p"},"-DMSM=OFF")),(0,i.yg)("h4",{id:"build_hash"},"BUILD_HASH"),(0,i.yg)("p",null,"Can be used in any mode to build a hash library. Currently it only includes Keccak hash function, but more are coming."),(0,i.yg)("p",null,"Default: ",(0,i.yg)("inlineCode",{parentName:"p"},"OFF")),(0,i.yg)("p",null,"Usage: ",(0,i.yg)("inlineCode",{parentName:"p"},"-DBUILD_HASH=ON")),(0,i.yg)("h4",{id:"build_tests"},"BUILD_TESTS"),(0,i.yg)("p",null,"Can be used in any mode to include tests runner binary."),(0,i.yg)("p",null,"Default: ",(0,i.yg)("inlineCode",{parentName:"p"},"OFF")),(0,i.yg)("p",null,"USAGE: ",(0,i.yg)("inlineCode",{parentName:"p"},"-DBUILD_TESTS=ON")),(0,i.yg)("h4",{id:"build_benchmarks"},"BUILD_BENCHMARKS"),(0,i.yg)("p",null,"Can be used in any mode to include benchmarks runner binary."),(0,i.yg)("p",null,"Default: ",(0,i.yg)("inlineCode",{parentName:"p"},"OFF")),(0,i.yg)("p",null,"USAGE: ",(0,i.yg)("inlineCode",{parentName:"p"},"-DBUILD_BENCHMARKS=ON")),(0,i.yg)("h4",{id:"devmode"},"DEVMODE"),(0,i.yg)("p",null,"Can be used in any mode to include debug symbols in the build."),(0,i.yg)("p",null,"Default: ",(0,i.yg)("inlineCode",{parentName:"p"},"OFF")),(0,i.yg)("p",null,"USAGE: ",(0,i.yg)("inlineCode",{parentName:"p"},"-DEVMODE=ON")),(0,i.yg)("h2",{id:"linking"},"Linking"),(0,i.yg)("p",null,"To link ICICLE with your project you first need to compile ICICLE with options of your choice. After that you can use CMake ",(0,i.yg)("inlineCode",{parentName:"p"},"target_link_libraries")," to link with the generated static libraries and ",(0,i.yg)("inlineCode",{parentName:"p"},"target_include_directories")," to include ICICLE headers (located in ",(0,i.yg)("inlineCode",{parentName:"p"},"icicle/include"),")."),(0,i.yg)("p",null,"Refer to our ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/ingonyama-zk/icicle/tree/main/examples/c%2B%2B"},"c++ examples")," for more info. Take a look at this ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/ingonyama-zk/icicle/blob/main/examples/c%2B%2B/msm/CMakeLists.txt#L22"},"CMakeLists.txt")),(0,i.yg)("h2",{id:"writing-new-bindings-for-icicle"},"Writing new bindings for ICICLE"),(0,i.yg)("p",null,"Since ICICLE Core is written in CUDA / C++ its really simple to generate static libraries. These static libraries can be installed on any system and called by higher level languages such as Golang."),(0,i.yg)("p",null,"Static libraries can be loaded into memory once and used by multiple programs, reducing memory usage and potentially improving performance. They also allow you to separate functionality into distinct modules so your static library may need to compile only specific features that you want to use."),(0,i.yg)("p",null,"Let's review the ",(0,i.yg)("a",{parentName:"p",href:"/icicle/golang-bindings"},"Golang bindings")," since its a pretty verbose example (compared to rust which hides it pretty well) of using static libraries. Golang has a library named ",(0,i.yg)("inlineCode",{parentName:"p"},"CGO")," which can be used to link static libraries. Here's a basic example on how you can use cgo to link these libraries:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},'/*\n#cgo LDFLAGS: -L/path/to/shared/libs -lbn254 -lbls12_381 -lbls12_377 -lbw6_671\n#include "icicle.h" // make sure you use the correct header file(s)\n*/\nimport "C"\n\nfunc main() {\n  // Now you can call the C functions from the ICICLE libraries.\n  // Note that C function calls are prefixed with \'C.\' in Go code.\n\n  out := (*C.BN254_projective_t)(unsafe.Pointer(p))\n  in := (*C.BN254_affine_t)(unsafe.Pointer(affine))\n\n  C.projective_from_affine_bn254(out, in)\n}\n')),(0,i.yg)("p",null,"The comments on the first line tell ",(0,i.yg)("inlineCode",{parentName:"p"},"CGO")," which libraries to import as well as which header files to include. You can then call methods which are part of the static library and defined in the header file, ",(0,i.yg)("inlineCode",{parentName:"p"},"C.projective_from_affine_bn254")," is an example."),(0,i.yg)("p",null,"If you wish to create your own bindings for a language of your choice we suggest you start by investigating how you can call static libraries."))}s.isMDXComponent=!0},1873:(e,t,n)=>{n(6540)}}]);