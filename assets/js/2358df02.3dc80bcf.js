"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[773],{5680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>d});var i=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),g=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=g(e.components);return i.createElement(c.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=g(t),m=r,d=u["".concat(c,".").concat(m)]||u[m]||p[m]||a;return t?i.createElement(d,o(o({ref:n},s),{},{components:t})):i.createElement(d,o({ref:n},s))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var g=2;g<a;g++)o[g]=t[g];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8654:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>g});var i=t(8168),r=(t(6540),t(5680));t(1873);const a={},o="NTT",l={unversionedId:"icicle/golang-bindings/ntt",id:"icicle/golang-bindings/ntt",title:"NTT",description:"NTT Example",source:"@site/docs/icicle/golang-bindings/ntt.md",sourceDirName:"icicle/golang-bindings",slug:"/icicle/golang-bindings/ntt",permalink:"/icicle/golang-bindings/ntt",editUrl:"https://github.com/ingonyama-zk/icicle/tree/main/docs/icicle/golang-bindings/ntt.md",tags:[],version:"current",lastUpdatedBy:"VitaliiH",lastUpdatedAt:1715232285,formattedLastUpdatedAt:"5/9/2024",frontMatter:{},sidebar:"GettingStartedSidebar",previous:{title:"MSM Pre computation",permalink:"/icicle/golang-bindings/msm-pre-computation"},next:{title:"ECNTT",permalink:"/icicle/golang-bindings/ecntt"}},c={},g=[{value:"NTT Example",id:"ntt-example",level:2},{value:"NTT Method",id:"ntt-method",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"NTT Configuration (NTTConfig)",id:"ntt-configuration-nttconfig",level:2},{value:"Fields",id:"fields",level:3},{value:"Default Configuration",id:"default-configuration",level:3},{value:"Initializing the NTT Domain",id:"initializing-the-ntt-domain",level:3},{value:"Releasing the domain",id:"releasing-the-domain",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Return Value",id:"return-value-1",level:3},{value:"Example",id:"example",level:3}],s={toc:g},u="wrapper";function p(e){let{components:n,...t}=e;return(0,r.yg)(u,(0,i.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"ntt"},"NTT"),(0,r.yg)("h2",{id:"ntt-example"},"NTT Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "github.com/ingonyama-zk/icicle/v2/wrappers/golang/core"\n  cr "github.com/ingonyama-zk/icicle/v2/wrappers/golang/cuda_runtime"\n  bn254 "github.com/ingonyama-zk/icicle/v2/wrappers/golang/curves/bn254"\n\n  "github.com/consensys/gnark-crypto/ecc/bn254/fr/fft"\n)\n\nfunc init() {\n  cfg := bn254.GetDefaultNttConfig()\n  initDomain(18, cfg)\n}\n\nfunc initDomain[T any](largestTestSize int, cfg core.NTTConfig[T]) core.IcicleError {\n  rouMont, _ := fft.Generator(uint64(1 << largestTestSize))\n  rou := rouMont.Bits()\n  rouIcicle := bn254.ScalarField{}\n\n  rouIcicle.FromLimbs(rou[:])\n  e := bn254.InitDomain(rouIcicle, cfg.Ctx, false)\n  return e\n}\n\nfunc main() {\n  // Obtain the default NTT configuration with a predefined coset generator.\n  cfg := bn254.GetDefaultNttConfig()\n\n  // Define the size of the input scalars.\n  size := 1 << 18\n\n  // Generate scalars for the NTT operation.\n  scalars := bn254.GenerateScalars(size)\n\n  // Set the direction of the NTT (forward or inverse).\n  dir := core.KForward\n\n  // Allocate memory for the results of the NTT operation.\n  results := make(core.HostSlice[bn254.ScalarField], size)\n\n  // Perform the NTT operation.\n  err := bn254.Ntt(scalars, dir, &cfg, results)\n  if err.CudaErrorCode != cr.CudaSuccess {\n    panic("NTT operation failed")\n  }\n}\n')),(0,r.yg)("h2",{id:"ntt-method"},"NTT Method"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"func Ntt[T any](scalars core.HostOrDeviceSlice, dir core.NTTDir, cfg *core.NTTConfig[T], results core.HostOrDeviceSlice) core.IcicleError\n")),(0,r.yg)("h3",{id:"parameters"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"scalars")),": A slice containing the input scalars for the transform. It can reside either in host memory or device memory."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"dir")),": The direction of the NTT operation (",(0,r.yg)("inlineCode",{parentName:"li"},"KForward")," or ",(0,r.yg)("inlineCode",{parentName:"li"},"KInverse"),")."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"cfg")),": A pointer to an ",(0,r.yg)("inlineCode",{parentName:"li"},"NTTConfig")," object, containing configuration options for the NTT operation."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"results")),": A slice where the results of the NTT operation will be stored. This slice can be in host or device memory.")),(0,r.yg)("h3",{id:"return-value"},"Return Value"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"CudaError")),": Returns a CUDA error code indicating the success or failure of the NTT operation.")),(0,r.yg)("h2",{id:"ntt-configuration-nttconfig"},"NTT Configuration (NTTConfig)"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"NTTConfig")," structure holds configuration parameters for the NTT operation, allowing customization of its behavior to optimize performance based on the specifics of your protocol."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"type NTTConfig[T any] struct {\n    Ctx cr.DeviceContext\n    CosetGen T\n    BatchSize int32\n    ColumnsBatch bool\n    Ordering Ordering\n    areInputsOnDevice  bool\n    areOutputsOnDevice bool\n    IsAsync bool\n    NttAlgorithm NttAlgorithm\n}\n")),(0,r.yg)("h3",{id:"fields"},"Fields"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"Ctx")),": Device context containing details like device ID and stream ID."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"CosetGen")),": Coset generator used for coset (i)NTTs, defaulting to no coset being used."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"BatchSize")),": The number of NTTs to compute in one operation, defaulting to 1."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"ColumnsBatch")),": If true the function will compute the NTTs over the columns of the input matrix and not over the rows. Defaults to ",(0,r.yg)("inlineCode",{parentName:"li"},"false"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"Ordering")),": Ordering of inputs and outputs (",(0,r.yg)("inlineCode",{parentName:"li"},"KNN"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"KNR"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"KRN"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"KRR"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"KMN"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"KNM"),"), affecting how data is arranged."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"areInputsOnDevice")),": Indicates if input scalars are located on the device."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"areOutputsOnDevice")),": Indicates if results are stored on the device."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"IsAsync")),": Controls whether the NTT operation runs asynchronously."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"NttAlgorithm")),": Explicitly select the NTT algorithm. Default value: Auto (the implementation selects radix-2 or mixed-radix algorithm based on heuristics).")),(0,r.yg)("h3",{id:"default-configuration"},"Default Configuration"),(0,r.yg)("p",null,"Use ",(0,r.yg)("inlineCode",{parentName:"p"},"GetDefaultNTTConfig")," to obtain a default configuration, customizable as needed."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"func GetDefaultNTTConfig[T any](cosetGen T) NTTConfig[T]\n")),(0,r.yg)("h3",{id:"initializing-the-ntt-domain"},"Initializing the NTT Domain"),(0,r.yg)("p",null,"Before performing NTT operations, it's necessary to initialize the NTT domain; it only needs to be called once per GPU since the twiddles are cached."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"func InitDomain(primitiveRoot ScalarField, ctx cr.DeviceContext, fastTwiddles bool) core.IcicleError\n")),(0,r.yg)("p",null,"This function initializes the domain with a given primitive root, optionally using fast twiddle factors to optimize the computation."),(0,r.yg)("h3",{id:"releasing-the-domain"},"Releasing the domain"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"ReleaseDomain")," function is responsible for releasing the resources associated with a specific domain in the CUDA device context."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"func ReleaseDomain(ctx cr.DeviceContext) core.IcicleError\n")),(0,r.yg)("h3",{id:"parameters-1"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"ctx")),": a reference to the ",(0,r.yg)("inlineCode",{parentName:"li"},"DeviceContext")," object, which represents the CUDA device context.")),(0,r.yg)("h3",{id:"return-value-1"},"Return Value"),(0,r.yg)("p",null,"The function returns a ",(0,r.yg)("inlineCode",{parentName:"p"},"core.IcicleError"),", which represents the result of the operation. If the operation is successful, the function returns ",(0,r.yg)("inlineCode",{parentName:"p"},"core.IcicleErrorCode(0)"),"."),(0,r.yg)("h3",{id:"example"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/icicle-crypto/icicle-core/cr"\n    "github.com/icicle-crypto/icicle-core/core"\n)\n\nfunc example() {\n  cfg := GetDefaultNttConfig()\n  err := ReleaseDomain(cfg.Ctx)\n  if err != nil {\n      // Handle the error\n  }\n}\n')))}p.isMDXComponent=!0},1873:(e,n,t)=>{t(6540)}}]);